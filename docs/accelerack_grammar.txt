

;; Integration with host language (Racket):
meta
  = (acc e)
  | (run-acc e)
  | <definitions>

definitions d
  = (define-acc (f lp ...) e)
  | (define-acc x e)
  | (define-acc x : t e)
  | (: v t)

function, or lambda param, lp
  = x | [x : t]

type t
  = elt               ; Element Type
  | #(t ...)          ; Tuple Type
  | (Array nt t)      ; Array Type
  | (-> t ... t)      ; Function Type

element-type et
  = Int
  | Bool
  | Double
  | #(et ...)         ; Tuple of Scalars
  | a                 ; Type variable (lower case)
  | (Num a)           ; Numeric type variable
  | SExp              ; A value in the meta-language

numeric type nt
  = n               ;; Type-level numeric literal
  | (add1 nt)       ;; Increment type-level number

n = non-negative integer

expression e
  = (acc-array a)           ; Literal arrays
  | (map e e)               ; Map is *not* first class
  | (zipwith e e e)
  | (fold e e e)
  | (generate e e ....)     ; N-dimensional generate
  | (stencil3x3 e b e)      ; Take a function, (lambda (x1 .. x9) e)
  | (until (v e e) e)       ; Repeatedly evaluate until condition is met.
  | (replicate (v ..) (e ...) e) ; Expand the dimension and remap indices.
  | (let (lb ...) e)        ; Let binding
  | x                       ; Variable
  | p                       ; Primitive function
  | (lambda (lp ...) e)     ; Lambda abs
  | (e e ...)               ; Application
  | (if e e e)              ; scalar or array conditionals
  | (vector e ...)          ; Tuple expression
  | (vector-ref e e)        ; Tuple dereference
  | (acc-array-ref e e ...) ; N-dimensional array dereference.
  | (: e t)                 : Type ascription
  | (use x t)               ; (unquote) Import a normal Racket variable

let binding, lb
  = [x e] | [x : t e]

;; Extra sugar to add later: or/and, let*, ...

primops p
  = + - * / expt = < <= >= > and or not add1 sub1 abs sqrt min max
    modulo quotient remainder round ceiling floor exact->inexact map
    zipwith

value v
  = <boolean>
  | <integer>
  | <double>

;; These are of type SExp:
boundary conditions b
  = 'Clamp | 'Mirror | 'Wrap | '(Constant v)

array-data a
  = v                                ; zero-dimensional scalar
  | (a ...), all a have same length  ; (S n)-dimensional data
