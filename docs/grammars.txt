

TODO: Latex me.


Language Grammar
----------------

Here is an initial, very small subset:

Accelerack programs are introduced into Racket programs with:

  (acc Def*)

And:

  (run E)

Definitions consist of:

  Def := (define Var E)
       | (define (Var Var*) E)

Expressions:

  E := (map E E)
     | (generate E E)
     | (fold E E E)
     | ...
     | C
     | (+ E E) | (* E E) ...
     | (Z E*)
     | (array-ref E E)
     | (if E E E)
     | (tuple E*)
     | (let ((P E) *) E)
     | (lambda (Arg*) E)
     | (E E*)
     | (: E T)

  Arg := Var | [Var : Ty]

  Note: tuple is an alias for "vector" when run outside an acc block
  Note: pattern matching is the only way to destructure tuples.

Constants, i.e. numbers and tuples:

  C := <Num>
     | #( C* )
     | #\char

Patterns:

  P := Var
     | #( P* )

Types:

  Ty := (Array Dim Elt)
     | Elt
     | #( Ty Ty+ )
     | (-> Ty* Ty)

  Elt := Int | Int16 | ...
       | Double | Float | Char ...
       | ShapeTy
       | #( )
       | #( Elt Elt+ )

  ShapeTy := (Z Elt*)

  Dim := DIM0 | DIM1 | DIM2 | DIM3 | DIM4 ...


There are some invariants that kepe Accelerate's scalar and array
languages stratified which are NOT present in the grammar above.
Rather, they need to be enforced by the type checker.


Types of Primitives
-------------------

We need to build a table of primitive types.  These should be nearly isomorphic

    generate :: (Shape ix, Elt a) => Exp ix -> (Exp ix -> Exp a) -> Acc (Array ix a)

But we can't actually write these types in the grammar of types we
have above, so we'll write them informally, and with an (also
informal) set of side conditions:

    (: generate (-> sh (-> sh a) (Array sh a)))
      where a \in ShapeTy
            dim = |sh|

Phase 2 types:

    (: generate (-> DIM1 (-> DIM1 Int)   (Array DIM1 Int)))
    (: generate (-> DIM1 (-> DIM1 Float) (Array DIM1 Float)))
    (: generate (-> DIM2 (-> DIM2 #(Int Float)) (Array DIM2 #(Int Float))))
    ....

Example program and its type:

  (generate (Z 3 5)
    (lambda ([x : DIM2]) (shape-ref x 0)))
    : (Array DIM2 Int)

  (Z :. 3 :. 5) :: (Z :. Int :. Int)
  (Z 3 5) :: (Z Int Int)
  (Z 3 5) :: DIM2



Current Limitations
-------------------

The above proposal has no concrete syntax for type variables or
polymorphic types.  They would be infered, and part of the type
checker, but NOT user provided in signatures.



Two phase type checking proposal
--------------------------------

What is the type of "+"?  Our initial proposal is a two phase
type-checking scheme:

 * Phase 1, pre normalization:
   "+" has type (-> a a a), i.e. "a,a -> a"

 * Phase 2, post normalization: "+" has ONE of:
   (-> Int Int Int)
   (-> Double Double Double) ...

The set of allowed types in phase 2 does NOT include
(-> Char Char Char), or any type containing tuples.  The idea is that
after normalization, + is unified with one of the list of monomorphic
types.  But this choise is delicate, as the choice for different
polymorphic operators can be inter-twined, e.g.:

  (* (+ a b) c)

We may conceivably need to search multiple possibilites for + and * to
find a compatible setting.

ALTERNATIVE: A designated numeric kind can make this kind of
defaulting process much easier.  Simply resolve any unconstrained type
variables (of numeric kind) at the end of phase 2 typecheck to
whatever the default is: e.g. Int or Double or whatever.


Note:

Because of phase 1 type checking it is still possible to get a type error
from a library which defines only functions:

  (acc (define (f x) ...))

Even though none of this code is run on the GPU and normalization
hasn't happened yet, (+) may still be misused at a type not compatible
with (-> a a a).

Further, if we want, we could elect to do a "precheck" by verifying
that the type for + in the above library unifies with AT LEAST ONE of
the phase two types.  This would mean that (+ #\c #\b) would fail type
check right away.



Possibility: Gradual typing
---------------------------

Inside of acc/run blocks the types above are the whole story.  But
outside these blocks all expressions E continue to be valid but must
also interoperate with arbitrary Racket code.  It is unclear currently
[2015.04.23] whether gradual typing will be needed / help in this
scenario.

Gradual types, may eventually be used internally, or perhaps just in
the metatheory.  In this case we would extend "Ty" with "Dyn", the
dynamic type.  Thus (Array Dim Dyn) is an object which we know to be
an Accelerate array, but which may be heterogeneous and even contain
arbitrary Racket objects.  This, for example, is the return type of
"map/a" when called outside of an acc block.
